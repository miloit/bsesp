#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>
//#include <FS.h>
#include <LittleFS.h>
#include <ArduinoJson.h>
#include <PubSubClient.h>
#include <ESP8266mDNS.h>

#define NUMBER_OF_SUBCRIBINGTOPICS 3



const char* htmlfile = "/index.html";

char mqttServer[40];
char mqttPort[40];
char mqttUser[40];
char mqttPassword[40];
char mqttFingerprint[80];
char deviceName[40];
char softwareVersion[] = "0.1";
char mqttSubscribeTopics[NUMBER_OF_SUBCRIBINGTOPICS][150] =
{ "/text",
  "/intensity",
  "/scrollwait"
};
//flag for saving data
bool shouldSaveConfig = false;

const char* indexhtmlfile = "/index.html";

ESP8266WebServer server(80);
WiFiClientSecure espWifiClient;
PubSubClient client(espWifiClient);
MDNSResponder mdns;

//callback notifying us of the need to save config
void saveConfigCallback () {
  Serial.println("Should save config");
  shouldSaveConfig = true;
}

void handleSubmit()
{
  
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {

  Serial.print("Message arrived in topic: ");
  Serial.println(topic);

  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }

  Serial.println();
  Serial.println("-----------------------");

}





void handleADC() {
  uint adcrawvalue = analogRead(A0);
  char voltage[50];
  float voltagevalue = adcrawvalue / 1023.0;
  voltagevalue = voltagevalue * 5.9;
  snprintf(voltage, 50, "%.2f", voltagevalue);
  Serial.println(voltage);
  server.send(200, "text/plane", voltage);
}

void handleRoot() {
 
  Serial.println("eeeeeeeeeeeeeeee");
  if (server.hasArg("LED")) {
    handleWebRequests();
  }
  else {
     /*server.sendHeader("Location", "/index.html", true);  //Redirect to our html web page
     server.send(302, "text/plane", "");*/
       //server.send(200, "text/html", "/index.html");
       //server.send(LittleFS, "/index.html", String(),false, processor);
       handleWebRequests();

  }

}

void handleWebRequests() {
  if (loadFromLittleFS(server.uri())){
    Serial.println("if");
    return;
  } else {
    Serial.println("else");
  String message = "File Not Detected\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " NAME:" + server.argName(i) + "\n VALUE:" + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  Serial.println(message);
  }
}



void returnFail(String msg)
{
  server.sendHeader("Connection", "close");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(500, "text/plain", msg + "\r\n");
}

void returnOK()
{
  server.sendHeader("Connection", "close");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/plain", "OK\r\n");
}



void setup() {
  delay(1000);
  Serial.begin(115200);
  Serial.println();

  //Initialize File System
  //if (SPIFFS.begin()) {
  if (LittleFS.begin()) {
    Serial.println("File System Initialized");
    if (LittleFS.exists("/config.json")) {
      //file exists, reading and loading
      Serial.println("reading config file");
      File configFile = LittleFS.open("/config.json", "r");
      if (configFile) {
        Serial.println("opened config file");
        size_t size = configFile.size();
        // Allocate a buffer to store contents of the file.
        std::unique_ptr<char[]> buf(new char[size]);


        configFile.readBytes(buf.get(), size);
        DynamicJsonDocument doc(512);
        auto error = deserializeJson(doc, buf.get());
        //DynamicJsonBuffer jsonBuffer;
        //JsonObject& json = jsonBuffer.parseObject(buf.get());
        //json.printTo(Serial);
        if (!error) {
          Serial.println("\nparsed json");
          strcpy(deviceName, doc["deviceName"]);
          strcpy(mqttServer, doc["mqttServer"]);
          strcpy(mqttPort, doc["mqttPort"]);
          strcpy(mqttUser, doc["mqttUser"]);
          strcpy(mqttPassword, doc["mqttPassword"]);
          strcpy(mqttFingerprint, doc["mqttFingerprint"]);
        } else {
          Serial.println("failed to load json config");
          Serial.print("deserializeJson() failed with code ");
          Serial.println(error.c_str());
        }
      }
    }
  } else {
    Serial.println("failed to mount FS");
  }
  WiFiManagerParameter custom_deviceName("deviceName", "deviceName", deviceName, 40);
  WiFiManagerParameter custom_mqttServer("server", "mqtt server", mqttServer, 40);
  WiFiManagerParameter custom_mqttPort("port", "mqtt port", mqttPort, 40);
  WiFiManagerParameter custom_mqttUser("user", "mqtt user", mqttUser, 40);
  WiFiManagerParameter custom_mqttPassword("password", "mqtt password", mqttPassword, 40);
  WiFiManagerParameter custom_mqttFingerprint("fingerprint", "mqtt fingerprint", mqttFingerprint, 80);


  //clean FS, for testing
  //LittleFS.format();
  //Serial.println("Cleaning File System");
  // WiFiManager
  WiFiManager wifiManager;
  // Uncomment and run it once, if you want to erase all the stored information
  //wifiManager.resetSettings();
  //Serial.println("Resetting wifiManager");
  //set config save notify callback
  wifiManager.setSaveConfigCallback(saveConfigCallback);

  // set custom ip for portal
  //wifiManager.setAPConfig(IPAddress(10,0,1,1), IPAddress(10,0,1,1), IPAddress(255,255,255,0));

  //add all your parameters here
  wifiManager.addParameter(&custom_deviceName);
  wifiManager.addParameter(&custom_mqttServer);
  wifiManager.addParameter(&custom_mqttPort);
  wifiManager.addParameter(&custom_mqttUser);
  wifiManager.addParameter(&custom_mqttPassword);
  wifiManager.addParameter(&custom_mqttFingerprint);


  // fetches ssid and pass from eeprom and tries to connect
  // if it does not connect it starts an access point with the specified name
  // here  "AutoConnectAP"
  // and goes into a blocking loop awaiting configuration
  // auto generated name ESP + ChipID
  wifiManager.autoConnect("AutoConnectAP");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }


  //If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(WiFi.SSID());
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //IP address assigned to your ESP

  strcpy(deviceName, custom_deviceName.getValue());
  strcpy(mqttServer, custom_mqttServer.getValue());
  strcpy(mqttPort, custom_mqttPort.getValue());
  strcpy(mqttUser, custom_mqttUser.getValue());
  strcpy(mqttPassword, custom_mqttPassword.getValue());
  strcpy(mqttFingerprint, custom_mqttFingerprint.getValue());


  //save the custom parameters to FS
  if (shouldSaveConfig) {
    Serial.println("saving config");

    /*DynamicJsonBuffer jsonBuffer;
      JsonObject& json = jsonBuffer.createObject();
      json["deviceName"] = deviceName;
      json["mqttServer"] = mqttServer;
      json["mqttPort"] = mqttPort;
      json["mqttUser"] = mqttUser;
      json["mqttPassword"] = mqttPassword;*/
    DynamicJsonDocument doc(512);
    doc["deviceName"] = deviceName;
    doc["mqttServer"] = mqttServer;
    doc["mqttPort"] = mqttPort;
    doc["mqttUser"] = mqttUser;
    doc["mqttPassword"] = mqttPassword;
    doc["mqttFingerprint"] = mqttFingerprint;

    File configFile = LittleFS.open("/config.json", "w");
    if (!configFile) {
      Serial.println("failed to open config file for writing");
    }

    serializeJson(doc, Serial);
    serializeJson(doc, configFile);
    configFile.close();

    /*File configFile = LittleFS.open("/config.json", "w");
      if (!configFile) {
      Serial.println("failed to open config file for writing");
      }

      json.printTo(Serial);
      json.printTo(configFile);
      configFile.close();*/
    //end save
  }

  
  Serial.println("");
  Serial.println("mqttServer");
  Serial.print(mqttServer);
  Serial.println("");
  Serial.println("mqttPort");
  Serial.print(mqttPort);
  Serial.println("");
  Serial.println("mqttUser");
  Serial.print(mqttUser);
  Serial.println("");
  Serial.println("mqttPassword");
  Serial.print(mqttPassword);
  Serial.println("");
  Serial.println("mqttFingerprint");
  Serial.print(mqttFingerprint);



  //Initialize Webserver
  server.on("/", handleRoot);
  server.onNotFound(handleWebRequests);
  server.on("/root", handleRoot);
  server.on("/getADC", handleADC); //Reads ADC function is called from out index.html
  server.begin();


  if (mdns.begin(deviceName, WiFi.localIP())) {
    Serial.println("MDNS responder started");
  }

  Serial.print("Filesystem");

  String str = "";
  Dir dir = LittleFS.openDir("/");
  while (dir.next()) {
    str += dir.fileName();
    str += " / ";
    str += dir.fileSize();
    str += "\r\n";
}
Serial.print(str);
}

void loop() {
  if (!client.connected())  {
    mqttReconnect();
  }
  server.handleClient();
  client.loop();
  mqttSendStatusInfo();
  delay(2000);
}

bool loadFromLittleFS(String path) {
  bool success = false;

  String dataType = "text/plain";
  if (path.endsWith("/")) path += "index.html";

  if (path.endsWith(".src")) path = path.substring(0, path.lastIndexOf("."));
  else if (path.endsWith(".html")) dataType = "text/html";
  else if (path.endsWith(".htm")) dataType = "text/html";
  else if (path.endsWith(".css")) dataType = "text/css";
  else if (path.endsWith(".js")) dataType = "application/javascript";
  else if (path.endsWith(".png")) dataType = "image/png";
  else if (path.endsWith(".gif")) dataType = "image/gif";
  else if (path.endsWith(".jpg")) dataType = "image/jpeg";
  else if (path.endsWith(".ico")) dataType = "image/x-icon";
  else if (path.endsWith(".xml")) dataType = "text/xml";
  else if (path.endsWith(".pdf")) dataType = "application/pdf";
  else if (path.endsWith(".zip")) dataType = "application/zip";
  File dataFile = LittleFS.open(path.c_str(), "r");
  if (dataFile) {
  if (server.hasArg("download")) dataType = "application/octet-stream";
  if (server.streamFile(dataFile, dataType) != dataFile.size()) {
  }


  
  success = true;
}
dataFile.close();
  return success;
}


void mqttReconnect() {
  char *mqttStatusTopic;
  mqttStatusTopic = (char *)malloc((strlen(deviceName) + 7 + 1) * (sizeof(*deviceName)));

  strcpy(mqttStatusTopic, deviceName);
  strncat(mqttStatusTopic, "/status", 7);
  Serial.println("");
  Serial.println("mqttStatusTopic");
  Serial.print(mqttStatusTopic);

  /*char *mqttSubscribeTopic1;
    mqttSubscribeTopic1 = (char *)malloc((strlen(deviceName) + 5 + 1) * (sizeof(*deviceName)));
    strcpy(mqttSubscribeTopic1, deviceName);
    strncat(mqttSubscribeTopic1, "/text", 7);
    Serial.println("");
    Serial.println("mqttSubscribeTopic1");
    Serial.print(mqttSubscribeTopic1);


    char *mqttSubscribeTopic2;
    mqttSubscribeTopic2 = (char *)malloc((strlen(deviceName) + 11 + 1) * (sizeof(*deviceName)));
    strcpy(mqttSubscribeTopic2, deviceName);
    strncat(mqttSubscribeTopic2, "/scrollwait", 11);
    Serial.println("");
    Serial.println("mqttSubscribeTopic2");
    Serial.print(mqttSubscribeTopic2);


    char *mqttSubscribeTopic3;
    mqttSubscribeTopic3 = (char *)malloc((strlen(deviceName) + 10 + 1) * (sizeof(*deviceName)));
    strcpy(mqttSubscribeTopic3, deviceName);
    strncat(mqttSubscribeTopic3, "/intensity", 10);
    Serial.println("");
    Serial.println("mqttSubscribeTopic3");
    Serial.print(mqttSubscribeTopic3);
    Serial.println("");*/

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    
    if (strcmp(deviceName, "") && strcmp(mqttUser, "") && strcmp(mqttPassword, "") && strcmp(mqttStatusTopic, "") && strcmp(mqttStatusTopic, "") && !strcmp(mqttFingerprint,"") ) {
        espWifiClient.setInsecure();
        client.setServer(mqttServer, atoi(mqttPort));
        client.setCallback(mqttCallback);
        client.connect(deviceName, mqttUser, mqttPassword, mqttStatusTopic, 0, true, "OFF");
    } else if (strcmp(deviceName, "") && strcmp(mqttUser, "") && strcmp(mqttPassword, "") && strcmp(mqttFingerprint, "") && strcmp(mqttStatusTopic, "")) {
      espWifiClient.allowSelfSignedCerts();
      espWifiClient.setFingerprint(mqttFingerprint);
      client.setServer(mqttServer, atoi(mqttPort));
      client.setCallback(mqttCallback);
      client.connect(deviceName, mqttUser, mqttPassword, mqttStatusTopic, 0, true, "OFF");
    } else  {
      Serial.println("Not enough information for mqtt connection.");
    }


    if (client.connected()) {
      Serial.println("connected");
      if (client.publish(mqttStatusTopic, "ON", true))
      {
        Serial.println("subscribing");
        for (int i = 0; i < NUMBER_OF_SUBCRIBINGTOPICS; i++)
        {
          char *mqttSubscribeTopic;
          mqttSubscribeTopic = (char *)malloc((strlen(deviceName) + strlen(mqttSubscribeTopics[i]) + 1) * (sizeof(*deviceName)));
          strcpy(mqttSubscribeTopic, deviceName);
          strncat(mqttSubscribeTopic, mqttSubscribeTopics[i], strlen(mqttSubscribeTopics[i]));
          Serial.println("");
          Serial.println("mqttSubscribeTopic");
          Serial.print(mqttSubscribeTopic);
          Serial.println("");
          client.subscribe(mqttSubscribeTopic);
          free(mqttSubscribeTopic);
        }
        /*client.subscribe(mqttSubscribeTopic1);
          client.subscribe(mqttSubscribeTopic2);
          client.subscribe(mqttSubscribeTopic3);*/
      } else {
        Serial.println("not subcribed");
      }

    } else {

      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);

    }
  }

  free(mqttStatusTopic);
  /*free(mqttSubscribeTopic1);
    free(mqttSubscribeTopic2);
    free(mqttSubscribeTopic3);*/
}


void mqttSendStatusInfo() {

  char *mqttStatusInfoTopic;
  mqttStatusInfoTopic = (char *)malloc((strlen(deviceName) + 12 + 1) * (sizeof(*deviceName)));

  strcpy(mqttStatusInfoTopic, deviceName);
  strncat(mqttStatusInfoTopic, "/status/info", 12);
  Serial.println("");
  Serial.println("mqttStatusInfoTopic");
  Serial.print(mqttStatusInfoTopic);

  char mqttStatusInfoMessage[150];
  snprintf(mqttStatusInfoMessage, 150, "{\"ip\":\"%s\",\"wifistrength\":%i,\"uptime\":%ld,\"ESPCore\":\"%s\",\"version\":\"%s\"}", WiFi.localIP().toString().c_str(), WiFi.RSSI(), millis(), ESP.getCoreVersion().c_str(), softwareVersion);

  int StatusInfoMessageLength = strlen(mqttStatusInfoMessage);
  bool mqttStatusInfoMessagePublishStatus = client.beginPublish(mqttStatusInfoTopic, StatusInfoMessageLength, false);
  int StatusInfoMessageCounter = 0;
  if (mqttStatusInfoMessagePublishStatus)
  {
    for (StatusInfoMessageCounter = 0; StatusInfoMessageCounter < StatusInfoMessageLength; StatusInfoMessageCounter = StatusInfoMessageCounter + 20)
    {
      client.print(String(mqttStatusInfoMessage).substring(StatusInfoMessageCounter, (StatusInfoMessageCounter + 20)));
    }
    client.print(String(mqttStatusInfoMessage).substring(StatusInfoMessageCounter, StatusInfoMessageLength));
    mqttStatusInfoMessagePublishStatus = client.endPublish();
  }
  if (mqttStatusInfoMessagePublishStatus)
  {
    Serial.println("");
    //Serial.println("Publishing %s", mqttStatusInfoTopic);
    Serial.print(mqttStatusInfoMessage);
  }
  free(mqttStatusInfoTopic);
}
